#!/bin/bash

#STUDANT NAME: SHAGALOV YARON 
#CODE:S12
#CLASS CODE: 7736/20
#LECTURER: SEGEV EREL

figlet "ANALYZER"

echo "By Yaron Shagalov" 
echo

HOME=$(pwd)
TOOL=$HOME/VOL

# Check the current user; exit if not ‘root’.
function START()
{
    if [ "$(whoami)" != "root" ]; then
        echo "[!] Must be root to run this script. Exiting..."
        exit 1
    fi

# Allow the user to specify the filename; check if the file exists. 

read -p "[?] Enter the file name you want to analyze: " FILE
if [ -f "$FILE" ]
then
echo "[#] Chacking if the file exits...."
echo
sleep 3
echo "[*] File exists" 
else 
echo "[!] File does not exis, check your input..."
fi
echo

FILMEM=$(pwd)


# Data should be saved into a directory
NAME=$(basename $FILE)
mkdir -p $TOOL/$NAME > /dev/null
echo "[+] Directory $NAME has created... continuing"
cd ../
echo
INSTALL_TOOLS


}

# Function to install required tools if they are missing
INSTALL_TOOLS()
{
    echo "[#] Checking if all required tools installed... "
    sleep 3
    required_tools=("foremost" "strings" "bulk_extractor")
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            echo "[*] $tool is not installed. Installing..."
            if ! apt-get install -y "$tool" &> /dev/null; then
                echo "[!] Failed to install $tool. Please check your internet connection or package manager settings."
                exit 1
            fi
        fi
    done
    echo "[*] All tools installed! Continuing..."
    echo
    VOL_INS
}
#Check if volatility exist, if not download and install.
function VOL_INS() 
{
    echo "[#] Checking if volatility exist..."
    sleep 3
    LOC=$(find ~ -type d -name "volatility_2.5.linux.standalone")
    if [ -e "$LOC" ]; then
    echo "[*] Volatility exists..."
    echo 
    echo "[*] Starting analyze $FILE"
    echo
    # Optionally start the analysis here
    ANALYSE
    else
        
        echo "[*] Volatility not installed, installing...."
        echo
        cd $TOOL 
        wget "https://www.dropbox.com/scl/fi/uom1rn1xeaeauu22rvmyo/Volatililty_for_Linux.zip?rlkey=6lvwe87ni8k3cml0pmy0ute7i&st=aywmw74y&dl=0" 2> /dev/null
        unzip 'Volatililty_for_Linux.zip?rlkey=6lvwe87ni8k3cml0pmy0ute7i&st=aywmw74y&dl=0' > /dev/null
        cd volatility_2.5.linux.standalone 
        mv volatility_2.5_linux_x64 vol > /dev/null
        chmod 777 vol   
        echo "[*] Volatility installed! Starting the analysis..."
        echo
        cd ../
        rm -Rd Volatililty_for_Linux.zip\?rlkey=6lvwe87ni8k3cml0pmy0ute7i\&st=aywmw74y\&dl=0

    
        cp "$FILMEM/$FILE" "$TOOL/volatility_2.5.linux.standalone"
    fi
    ANALYSE
}

#Using different carvers to automatically extract data
 function ANALYSE()
{
    cd $TOOL/
    echo "[#] Starting analyze $FILE using "foremost", "strings" and "bulk_extractor""

 cd /home/kali/Desktop/projects/vol 
    rm -rf BULK
    bulk_extractor -o BULK "$FILE" &> /dev/null
    
    # Check if the bulk extraction was successful before copying the output
    if [ -d BULK ]; then
        cp -r BULK "$TOOL/$NAME"
        echo "[*] Bulk extraction complete. Data copied to $TOOL/$NAME."
        rm -rf BULK
        echo
        sleep 1
    else
        echo "[!] Bulk extraction failed or BULK directory was not created."
        echo
        sleep 1
    fi

# Attempt to extract network traffic; if found, display to the user the location and size.
    if [ -f "/$TOOL/$NAME/BULK/packets.pcap" ]; then
        mv $TOOL/$NAME/BULK/packets.pcap /$TOOL/$NAME/packets.pcap
        echo "[*] Network File Exists, Saved into $TOOL/$NAME/packets.pcap [Size: $(ls -lh "$TOOL/$NAME/packets.pcap" | awk '{print $5}')]"
        echo
        sleep 1
    else
        echo "[!] No network  file found..."
        echo
        sleep 1
    fi
#Check for human-readable (exe files, passwords, usernames, etc.)

    echo "[#] Checking for human-readable strings..." 
    echo
    STRING=( "exe" "password" "http" "username" "@" )
    for i in "${STRING[@]}"
    do  
        echo "[-] Searching for '$i' in the file..."
        strings "$FILE" | grep -i "$i" > "$TOOL/$NAME/RES_Strings__$i"
        echo
        sleep 1
    done

    echo  "[#] Using foremost to recover files... "
    echo
    sleep 1
    cd $TOOL        
    foremost $HOME/$FILE 
    cd output
    echo "[*] Showing the number of files recovered:"
    cat audit.txt  |  tail -10 | head -6
    echo
    cd ../
    cp -r $TOOL/output $TOOL/$NAME/output
    rm -rf $TOOL/output
    echo "[*] Done using carvers, continiuing for volatility analyze...."
    echo
    sleep 3
    echo 
VOL
    
}
#Using volatility to analyze memory file.
function VOL()
{
echo "[#] Checking if the file is memory file... "
echo
cd $TOOL/volatility_2.5.linux.standalone
if [ -z "$(./vol -f $FILE imageinfo 2> /dev/null | grep 'Suggested Profile' | grep 'No Suggestion')"]  
    then 
        echo "[#] This is a memory file"
        echo
        sleep 1
    else
        echo "[!] This isn't a memory file" 
        echo
        sleep 1
fi

echo "[#] Starting analyze file: $FILE"
PROFILE=$(./vol -f "$FILE" imageinfo 2> /dev/null | grep 'Suggested' | grep 'Win' | awk -F ',' '{print $1}' | awk -F ':' '{print $2}' | sed 's/ //g') 
echo 
echo "[#] Investigated system profile: $PROFILE"
echo
        sleep 1
PLUGINS="pstree connscan pslist hivelist printkey"    
echo "[+] Extracting information..."
echo
for p in $PLUGINS;
    do 
        echo "[-] plugin being used: $p"
        ./vol -f "$FILE" --profile=$PROFILE $p 2> /dev/null >> $TOOL/$NAME/RES_$p.txt 
        echo
    done
    echo "[*] Investigation done and results saved to $TOOL/$NAME"
    echo
        sleep 1
    ZIP_RESULTS
    
} 
#Zipping all results.
function ZIP_RESULTS() {
    cd $TOOL
    echo "[#] Zipping the results directory..."
    echo
        sleep 1
    zip -r "$NAME.zip" "$NAME" > /dev/null
    if [ -f "$NAME.zip" ]; then
        echo "[+] Results successfully zipped: $TOOL/$NAME.zip"
        echo
        sleep 1
    else
        echo "[!] Failed to zip the results."
        echo
        sleep 1
    fi
    echo "Done investigtion exiting...."
    sleep 3
    exit
}
START








